/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os_project2;

import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author UpToTech
 */
public class PageReplacment extends javax.swing.JFrame {

    /**
     * Creates new form PageReplacment
     */
    static PageReplacment mainProgram;
    int sizeOfMemory = 10;
    final static int cyclesForDisk = 300;
    final static int cyclesForMemoryAccess = 1;
    int numberOfElementsInMemory = 0;
    int pointer = 0;
    ArrayList<Process> processes = new ArrayList<Process>();
    Frame memory[];
    ArrayList<Process> readyQueue = new ArrayList<Process>();       // ready queue to add arrived processes that are ready to run
    int cycles = 0;
    int tQuant = 2;
    int prevProcess = 0;
    int totalNumberOfFaults = 0;
    String inputFilesPath;

    public PageReplacment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browse = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        res = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        turnAroundTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        memSize = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        totalCycles = new javax.swing.JTextField();
        timeQuant = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalFaults = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OS Project #2");

        browse.setText("Browse and Run");
        browse.setToolTipText("");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        res.setEditable(false);
        res.setColumns(20);
        res.setFont(new java.awt.Font("Monospaced", 1, 15)); // NOI18N
        res.setRows(5);
        jScrollPane2.setViewportView(res);

        turnAroundTable.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        turnAroundTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "# of Faults", "Start Time", "Finish Time", "TurnAround", "Wait Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        turnAroundTable.setRowHeight(32);
        turnAroundTable.setRowMargin(10);
        jScrollPane1.setViewportView(turnAroundTable);

        jLabel1.setText("Memory View");

        jLabel2.setText("Process stats");

        infoTable.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Arrival", "Duration(Burst time)", "Number of Pages"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        infoTable.setRowHeight(32);
        infoTable.setRowMargin(10);
        jScrollPane3.setViewportView(infoTable);

        jLabel3.setText("Process Info");

        jLabel4.setText("Memory Size");

        jLabel5.setText("Total Cyles");

        totalCycles.setEditable(false);

        jLabel6.setText("Time Quantom");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Second Chance", "Clock" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Choose algorithm");

        jLabel8.setText("Total Page Faults");

        totalFaults.setEditable(false);

        jButton1.setText("Run Again?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 42, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(totalCycles, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(totalFaults, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(34, 34, 34))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(memSize, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(timeQuant)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(memSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(timeQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(4, 4, 4)
                                .addComponent(totalCycles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(4, 4, 4)
                                .addComponent(totalFaults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        JFileChooser choose = new JFileChooser();
        File selectedFile = new File("");
        choose.setCurrentDirectory(selectedFile);
        int returnValue = choose.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (!memSize.getText().equals("")) {
                sizeOfMemory = Integer.valueOf(memSize.getText());
            }
            
            selectedFile = choose.getSelectedFile();
            
            inputFilesPath = selectedFile.getParent();
            
            readFile(selectedFile);
            browse.setEnabled(false);
        }
    }//GEN-LAST:event_browseActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        mainProgram.dispose();
        mainProgram = new PageReplacment();
        mainProgram.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void readFile(File file) {

        Scanner input = null;
        try {
            input = new Scanner(file);
            input.nextLine();
            input.nextLine();
            while (input.hasNextLine()) {
                String line = input.nextLine();
                line = line.replaceAll("[ \t\n]", "");    // remove spaces and tabs
                if (line.equals("")) {
                    continue;
                }
                String token[] = line.split("[|]");
                processes.add(new Process(token[0], Double.parseDouble(token[1]), Double.parseDouble(token[2]), Integer.parseInt(token[3])));
                String fileName = inputFilesPath + "\\" + token[0] + ".txt";
                File pageFile = new File(fileName);
                Scanner pageInput = new Scanner(pageFile);

                while (pageInput.hasNext()) {
                    String address = pageInput.nextLine();
                    int pageNumber = (int) (Integer.parseInt(address.trim(), 16) / Math.pow(2, 12));
                    
                    processes.get(processes.size() - 1).pages.add(new Page(processes.size() - 1, pageNumber));
                }
            }
            DefaultTableModel model = (DefaultTableModel) infoTable.getModel();
            for (int k = 0; k < processes.size(); k++) {
                model.addRow(new Object[]{processes.get(k).processName, String.valueOf(processes.get(k).arrivalTime), String.valueOf(processes.get(k).burstTime), String.valueOf(processes.get(k).pages.size())});
                totalNumberOfFaults += processes.get(k).numberOfFaults;
            }
            RR();
            for (int k = 0; k < processes.size(); k++) {
                totalNumberOfFaults += processes.get(k).numberOfFaults;
            }
            totalCycles.setText(cycles + "");
            totalFaults.setText(totalNumberOfFaults + "");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PageReplacment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void RR() {

        memory = new Frame[sizeOfMemory];
        for (int i = 0; i < sizeOfMemory; i++) // initialize memory
        {
            memory[i] = new Frame();
        }

        int i = 0;
        if (!timeQuant.getText().equals("")) {
            tQuant = Integer.valueOf(timeQuant.getText());
        }
        int time = 0;// current time 
        while (!allProcessesFinished()) {
            prevProcess = i;
            checkProcessesArrival(time);    // check if any process has arriced at current moment 
            if (readyQueue.size() == 0) {
                time++;
                continue;
            }
            i = i % readyQueue.size();

            Process p = readyQueue.get(i++);
            if (prevProcess != i) {
                cycles += 5;
            }

            if (p.startTime == -1) {
                p.startTime = time;
            }

            for (int j = p.pageLocation; j < tQuant + p.pageLocation; j++) {

                secondChanceClock(p.pages.get(j));
                printMemory();
                checkProcessesArrival(++time);    // check if any process has arriced at current moment 
                p.remainingTime--;
                if (p.remainingTime == 0) {
                    break;
                }

            }
            p.pageLocation += tQuant;

            if (p.remainingTime == 0) {
                p.finishTime = time;
                readyQueue.remove(p);
                
                p.turnaround = p.finishTime - p.arrivalTime;
                p.waitTime = p.turnaround - p.burstTime;
            }

        }
        DefaultTableModel model = (DefaultTableModel) turnAroundTable.getModel();
        for (int k = 0; k < processes.size(); k++) {
            model.addRow(new Object[]{processes.get(k).processName,String.valueOf(processes.get(k).numberOfFaults), String.valueOf(processes.get(k).startTime), String.valueOf(processes.get(k).finishTime), String.valueOf(processes.get(k).turnaround), String.valueOf(processes.get(k).waitTime)});
        }
    }

    public void printMemory() {
        String result = "";
        for (int i = 0; i < sizeOfMemory; i++) {
            if (memory[i].page != null) {
                if (memory[i].bitReference) {
                    result += "\n" + memory[i].bitReference + " ";
                } else {
                    result += "\n" + memory[i].bitReference;
                }
                if (i != pointer) {
                    result += " | ( process: " + processes.get(memory[i].page.processPid).processName + " , pg#: " + memory[i].page.pageNumber + " ) |\n";
                } else {
                    result += " | ( process: " + processes.get(memory[i].page.processPid).processName + " , pg#: " + memory[i].page.pageNumber + " ) | << \n";
                }
            } else {
                result += "\n        X\n";
            }
        }
        result += "\n--------------------";
        res.setFont(new Font("Arial", 0, 15));
        res.setText(res.getText() + result);
    }

    public boolean allProcessesFinished() {  // function to check if all process has finished or not
        for (Process p : processes) {
            if (p.finishTime == -1) // if any process has finish time = -1, then it hasn't finished yet
            {
                return false;
            }
        }
        return true;
    }

    public void checkProcessesArrival(int time) {    // check if any process has arrived at the given time
        for (Process p : processes) {
            if (p.arrivalTime == time && !readyQueue.contains(p)) // if a process arrived at the given time
            {
                readyQueue.add(p);      // then add it to the readyQueue
            }
        }
    }

    public void secondChanceClock(Page pg) {

        int indexOfPageInMemory;
        indexOfPageInMemory = idxInMemory(pg);

        if (numberOfElementsInMemory < sizeOfMemory) {
            if (indexOfPageInMemory != -1) {       // Process p is in memory
                memory[indexOfPageInMemory].bitReference = true;
                cycles += cyclesForMemoryAccess;
            } else {
                memory[pointer].page = pg;
                pointer = (pointer + 1) % sizeOfMemory;
                numberOfElementsInMemory++;
                cycles += cyclesForDisk;
                processes.get(pg.processPid).numberOfFaults++;
            }

        } else if (indexOfPageInMemory != -1) {        // Process p is in memory
            memory[indexOfPageInMemory].bitReference = true;
            cycles += cyclesForMemoryAccess;
        } else {
            if (memory[pointer].bitReference) {
                pointer = resetBitReference(pointer);
            }
            memory[pointer].page = pg;
            pointer = (pointer + 1) % sizeOfMemory;
            cycles += cyclesForDisk;
            processes.get(pg.processPid).numberOfFaults++;
        }
    }

    public boolean equalPages(Page pg1, Page pg2) {
        if (pg1 == null || pg2 == null) {
            return false;
        }
        if ((pg1.pageNumber == pg2.pageNumber) && (pg1.processPid == pg2.processPid)) {
            return true;
        }

        return false;
    }

    public int idxInMemory(Page pg) {
        for (int i = 0; i < sizeOfMemory; i++) {
            if (equalPages(pg, memory[i].page)) {
                return i;
            }
        }
        return -1;
    }

    public int resetBitReference(int pointer) {
        for (int i = pointer; i < sizeOfMemory; i = (i + 1) % sizeOfMemory) {
            if (memory[i].bitReference) {
                memory[i].bitReference = false;
                pointer = (pointer + 1) % sizeOfMemory;
            } else {
                break;
            }
        }
        return pointer;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PageReplacment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PageReplacment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PageReplacment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PageReplacment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainProgram = new PageReplacment();
                mainProgram.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JTable infoTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField memSize;
    private javax.swing.JTextArea res;
    private javax.swing.JTextField timeQuant;
    private javax.swing.JTextField totalCycles;
    private javax.swing.JTextField totalFaults;
    private javax.swing.JTable turnAroundTable;
    // End of variables declaration//GEN-END:variables
}

package os_project1;

import static com.sun.javafx.css.SizeUnits.CM;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Click Team
 */
public class Interface extends javax.swing.JFrame {

     Scheduler scheduler = new Scheduler();
     boolean firstRun = true;
     boolean fileReadSuccessfully = false;
     DefaultTableModel processesInfoTableModel;
     DefaultTableModel ganttChartTableModel;
     
    /**
     * Creates new form Main
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithmsCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        processesInfoTable = new javax.swing.JTable();
        exitButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ganttChartTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        avgTurnaroundLabel = new javax.swing.JLabel();
        avgWaitingTimeTextField = new javax.swing.JTextField();
        avgWaitingTimeLabel = new javax.swing.JLabel();
        cpuUsageLabel = new javax.swing.JLabel();
        avgTurnaroundTimeTextField = new javax.swing.JTextField();
        cpuUsageTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        algorithmsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SJF", "SRTF", "RR", "RMS", "FCFS" }));
        algorithmsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmsComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Algorithm:");

        runButton.setText("Run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        processesInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Arrival Time", "Burst Time", "Start Time", "Finish Time", "Turnaround", "Waiting Time", "Repeat", "Interval", "Deadline"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(processesInfoTable);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        ganttChartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(ganttChartTable);

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 2, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Algorithms");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 2, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 102, 255));
        jLabel3.setText("** Gantt Chart **");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 2, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 102, 255));
        jLabel4.setText("CPU Scheduling");

        avgTurnaroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        avgTurnaroundLabel.setText("Average Turnaround Time");

        avgWaitingTimeTextField.setEditable(false);
        avgWaitingTimeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        avgWaitingTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgWaitingTimeTextFieldActionPerformed(evt);
            }
        });

        avgWaitingTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        avgWaitingTimeLabel.setText("Average Waiting Time");
        avgWaitingTimeLabel.setToolTipText("");

        cpuUsageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cpuUsageLabel.setText("Overall CPU Usage");

        avgTurnaroundTimeTextField.setEditable(false);
        avgTurnaroundTimeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        avgTurnaroundTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgTurnaroundTimeTextFieldActionPerformed(evt);
            }
        });

        cpuUsageTextField.setEditable(false);
        cpuUsageTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cpuUsageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuUsageTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(algorithmsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(268, 268, 268)
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(avgTurnaroundTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(avgTurnaroundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(138, 138, 138)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(avgWaitingTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(avgWaitingTimeTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(212, 212, 212)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cpuUsageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cpuUsageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1))
                    .addComponent(algorithmsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(avgWaitingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(avgTurnaroundLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(cpuUsageLabel)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avgWaitingTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpuUsageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avgTurnaroundTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        ArrayList<Integer> ganttChart = null;
        scheduler.resetAllProcesses();
                
        if(algorithmsCombo.getSelectedItem().equals("SJF")){
            ganttChart = scheduler.SJF();
        }
        else if(algorithmsCombo.getSelectedItem().equals("SRTF")){
            ganttChart = scheduler.SRTF();
        }
        else if(algorithmsCombo.getSelectedItem().equals("RR")){
            ganttChart = scheduler.RR();
        }
        else if(algorithmsCombo.getSelectedItem().equals("RMS")){
            ganttChart = scheduler.RMS();
        }
        else if(algorithmsCombo.getSelectedItem().equals("FCFS")){
            ganttChart = scheduler.FCFS();
        }
        
        if (ganttChart == null)                     // if some algorithm doesn't run for some reason
            return;

        processesInfoTableModel = (DefaultTableModel) processesInfoTable.getModel(); 
        ganttChartTableModel = (DefaultTableModel) ganttChartTable.getModel();
        
        if (!firstRun){                                 // in first run don't clear tables
            processesInfoTableModel.setRowCount(0);
            ganttChartTableModel.setColumnCount(0); 
            ganttChartTableModel.setRowCount(0);
        }
        else
            firstRun = false;
        
        buildProcessesInfoTable();              // bulid the tables
        buildGanttChartTable(ganttChart); 
        centerlizeTablesContents();             // make text-alignment = center
    }//GEN-LAST:event_runButtonActionPerformed

    public void centerlizeTablesContents(){     // function to make text-alignment = center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        for (int i = 0; i < processesInfoTable.getColumnCount(); i++)
            processesInfoTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        
        
        for (int i = 0; i < ganttChartTable.getColumnCount(); i++){
            ganttChartTable.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
            ganttChartTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);     
        }
    }
    
    public void buildProcessesInfoTable(){      // function to build processes info table
        
        Object row[] = new Object[10];
        for (Process process : scheduler.processes) {
            row[0] = process.pid;
            row[1] = process.arrivalTime;
            row[2] = process.burstTime;
            row[3] = process.startTime;
            row[4] = process.finishTime;
            row[5] = process.turnaround;
            row[6] = process.waitingTime;
            if(algorithmsCombo.getSelectedItem().equals("RMS")){
                row[7] = process.repeat;
                row[8] = process.interval;
                row[9] = process.deadline;
                
                avgTurnaroundTimeTextField.setText("X");
                avgWaitingTimeTextField.setText("X");
                cpuUsageTextField.setText("X");                 
            }
            else{
                row[7] = "X";
                row[8] = "X";
                row[9] = "X";   
                
                avgTurnaroundTimeTextField.setText(scheduler.avgTurnaround() + "");
                avgWaitingTimeTextField.setText(scheduler.avgWaitingTime()+ "");
                cpuUsageTextField.setText(scheduler.cpuUsage()+ ""); 
            }
               
            processesInfoTableModel.addRow(row);
        }
    }
    
    public void buildGanttChartTable(ArrayList<Integer> ganttChart){    // function to build gantt chart table
        
        int burstStartTime = 0;
        int burstFinishTime;

        while(true){
            burstFinishTime = currentBurstFinishTime(ganttChart, burstStartTime);

            if (burstFinishTime == -1)
                break;

            ganttChartTableModel.addColumn(burstStartTime + "-" + burstFinishTime);
            burstStartTime = burstFinishTime;
        }    
        
        ArrayList<Integer> pids = getBurstsPids(ganttChart);
                
        Object ganttChartRow [] = new Object[pids.size()];
        int j = 0;
        for (Integer pid : pids){
            if (pid == -1)
                ganttChartRow[j++] = "Nothing";
            else
                ganttChartRow[j++] = "P" + pid;
        }
            
        ganttChartTableModel.addRow(ganttChartRow);
    }
    
    public ArrayList<Integer> getBurstsPids (ArrayList<Integer> ganttChart){    // function to get the PIDs of process was running in gantt chart in order

        int currentBurstPid = ganttChart.get(0);
        ArrayList<Integer> pids = new ArrayList<Integer>();
        
        pids.add(currentBurstPid);
        
        for (int i = 0; i < ganttChart.size() - 1; i++)     // ganttChart.size() - 1 to exlude the -1 at the end of each ganttChart
            if (currentBurstPid != ganttChart.get(i)){
                currentBurstPid = ganttChart.get(i);
                pids.add(currentBurstPid);
            }
        
        return pids;
    }
 
    public int currentBurstFinishTime (ArrayList<Integer> ganttChart, int burstStartTime){  // function to find the finish time of the given burst (given its start time)
        
        int i = burstStartTime;
        int currentlyRunningPid = ganttChart.get(i);
        
        if (i == ganttChart.size())
            return -1;
        
        while(currentlyRunningPid == ganttChart.get(i)){
            i++;
            if (i == ganttChart.size())
                return -1;
        }
        
        int burstFinishTime = i;
        return burstFinishTime;
    }
 
    private void algorithmsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmsComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmsComboActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed

        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser choose = new JFileChooser();
        int returnValue = choose.showOpenDialog(null);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            File selectedFile = choose.getSelectedFile();
            fileReadSuccessfully = scheduler.readFile(selectedFile.getPath());           
        }
        if (fileReadSuccessfully)
            runButton.setEnabled(true);
    }//GEN-LAST:event_browseButtonActionPerformed
    
    private void avgWaitingTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgWaitingTimeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_avgWaitingTimeTextFieldActionPerformed

    private void avgTurnaroundTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgTurnaroundTimeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_avgTurnaroundTimeTextFieldActionPerformed

    private void cpuUsageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuUsageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpuUsageTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algorithmsCombo;
    private javax.swing.JLabel avgTurnaroundLabel;
    private javax.swing.JTextField avgTurnaroundTimeTextField;
    private javax.swing.JLabel avgWaitingTimeLabel;
    private javax.swing.JTextField avgWaitingTimeTextField;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel cpuUsageLabel;
    private javax.swing.JTextField cpuUsageTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JTable ganttChartTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable processesInfoTable;
    private javax.swing.JButton runButton;
    // End of variables declaration//GEN-END:variables
}
